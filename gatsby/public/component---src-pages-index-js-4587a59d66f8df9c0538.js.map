{"version":3,"sources":["webpack:///./src/utils/useLatestData.js","webpack:///./src/styles/Grids.js","webpack:///./src/components/LoadingGrid.js","webpack:///./src/components/ItemGrid.js","webpack:///./src/pages/index.js"],"names":["gql","String","raw","deets","useLatestData","useState","hotSlices","setHotSlices","slicemasters","setSlicemasters","useEffect","fetch","process","method","headers","body","JSON","stringify","query","then","res","json","data","StoreSettings","slicemaster","catch","err","console","log","HomePageGrids","styled","div","ItemsGrid","ItemStyles","LoadingGrid","count","Array","from","length","map","_","i","className","src","alt","width","height","ItemGrid","items","item","name","image","asset","url","style","background","metadata","lqip","backgroundSize","CurrentlySlicing","HotSlices","HomePage"],"mappings":"sjBAGA,IAAMA,EAAMC,OAAOC,IAEbC,EAAK,gIAwDIC,MA3Cf,WAA0B,IAAD,EACaC,qBAA3BC,EADc,KACHC,EADG,OAEmBF,qBAAjCG,EAFc,KAEAC,EAFA,KAwCrB,OAlCAC,qBAAU,WACNC,MAAMC,+DAAqC,CACvCC,OAAQ,OACRC,QAAS,CACL,eAAiB,oBAErBC,KAAMC,KAAKC,UAAU,CAEjBC,MAAOlB,EAAF,IAMIG,EAGCA,OAMfgB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAC,GAI5Bb,EAAaa,EAAIE,KAAKC,cAAcjB,WACpCG,EAAgBW,EAAIE,KAAKC,cAAcC,gBACxCC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,QAEjB,IAEI,CAACpB,YAAWE,iB,YCxDVqB,EAAgBC,IAAOC,IAAV,2EAAGD,CAAH,6EAObE,EAAYF,IAAOC,IAAV,uEAAGD,CAAH,0DAOTG,EAAaH,IAAOC,IAAV,wEAAGD,CAAH,mdCSRI,MArBf,YAAiC,IAAVC,EAAS,EAATA,MACnB,OACI,kBAACH,EAAD,KACKI,MAAMC,KAAK,CAAEC,OAAQH,IAASI,KAAI,SAACC,EAAGC,GAAJ,OAC/B,kBAACR,EAAD,KACI,2BACI,0BAAMS,UAAU,QAAhB,eAEJ,yBACIA,UAAU,UACVC,IAAI,0HACJC,IAAI,UACJC,MAAM,MACNC,OAAO,cCEhBC,MAhBf,YAA8B,IAAVC,EAAS,EAATA,MAChB,OAAO,kBAAChB,EAAD,KACFgB,EAAMT,KAAI,SAACU,GAAD,OACP,kBAAChB,EAAD,KACI,2BACI,0BAAMS,UAAU,QAAQO,EAAKC,OAEjC,yBAAKL,MAAM,MAAMC,OAAO,MAAMH,IAAQM,EAAKE,MAAMC,MAAMC,IAAtB,wBAAkDT,IAAKK,EAAKC,KAAMI,MAAO,CACtGC,WAAW,OAAQN,EAAKE,MAAMC,MAAMI,SAASC,KAAnC,IACVC,eAAgB,iBCJpC,SAASC,EAAT,GAA6C,IAAjBnD,EAAgB,EAAhBA,aAExB,OADAmB,QAAQC,IAAIpB,GAER,6BACI,wBAAIkC,UAAU,UACV,0BAAMA,UAAU,aAAhB,oBAEJ,wDACElC,GAAgB,kBAAC,EAAD,CAAa2B,MAAO,IACrC3B,KAAiBA,aAAD,EAACA,EAAc8B,SAAY,2DAC3C9B,aAAA,EAAAA,EAAc8B,SAAU,kBAAC,EAAD,CAAUU,MAAOxC,KAItD,SAASoD,EAAT,GAAmC,IAAdtD,EAAa,EAAbA,UACjB,OACI,6BACI,wBAAIoC,UAAU,UACV,0BAAMA,UAAU,aAAhB,eAEJ,4DACEpC,GAAa,kBAAC,EAAD,CAAa6B,MAAO,IAClC7B,KAAcA,aAAD,EAACA,EAAWgC,SAAY,mDACrChC,aAAA,EAAAA,EAAWgC,SAAU,kBAAC,EAAD,CAAUU,MAAO1C,KAoBpCuD,UAff,WAAsB,IAAD,EAEiBzD,IAA3BI,EAFU,EAEVA,aAAcF,EAFJ,EAEIA,UACrB,OACI,yBAAKoC,UAAU,UACX,oDACA,gEACA,kBAACb,EAAD,KACK,kBAAC8B,EAAD,CAAkBnD,aAAcA,IAChC,kBAACoD,EAAD,CAAWtD,UAAWA","file":"component---src-pages-index-js-4587a59d66f8df9c0538.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\n\r\nconst gql = String.raw;\r\n\r\nconst deets = `\r\n    name\r\n    _id\r\n    image {\r\n      asset {\r\n        url\r\n        metadata {\r\n          lqip\r\n        }\r\n      }\r\n    }\r\n`;\r\n\r\nfunction useLatestData() {\r\n    const [hotSlices, setHotSlices] = useState();\r\n    const [slicemasters, setSlicemasters] = useState();\r\n\r\n    // use side effect to fetch the data from the graphQL endpoint\r\n\r\n    useEffect(() => {\r\n        fetch(process.env.GATSBY_GRAPHQL_ENDPOINT, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type' : 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                // IMPORTANT NOTE: This is querying sanity, not gatsby\r\n                query: gql`\r\n                query {\r\n                    StoreSettings(id: \"downtown\")\r\n                    {\r\n                    name\r\n                    slicemaster{\r\n                       ${deets}\r\n                    }\r\n                    hotSlices{\r\n                        ${deets}\r\n                    }\r\n                    }\r\n                }\r\n            `,\r\n            })\r\n        }).then(res => res.json()).then(res => {\r\n            // check for errors\r\n\r\n            // set the data to state\r\n            setHotSlices(res.data.StoreSettings.hotSlices);\r\n            setSlicemasters(res.data.StoreSettings.slicemaster);\r\n        }).catch(err => {\r\n            console.log(err)\r\n        })\r\n    }, [])\r\n\r\n    return {hotSlices, slicemasters}\r\n}\r\n\r\nexport default useLatestData\r\n\r\n\r\n/*\r\n `\r\n                    query {\r\n                        StoreSettings(id: \"downtown\")\r\n                        {\r\n                        name\r\n                        slicemaster{\r\n                            name\r\n                        }\r\n                        hotSlices{\r\n                            name\r\n                        }\r\n                        }\r\n                    }\r\n                `,\r\n\r\n\r\n*/","import styled from \"styled-components\"\r\n\r\nexport const HomePageGrids = styled.div`\r\n    display: grid;\r\n    gap: 20px;\r\n    grid-template-columns: repeat(2, minmax(auto, 1fr));\r\n`;\r\n\r\n\r\nexport const ItemsGrid = styled.div`\r\n    display: grid;\r\n    gap: 2rem;\r\n    grid-template-columns: 1fr 1fr;\r\n`\r\n\r\n\r\nexport const ItemStyles = styled.div`\r\n    text-align: center;\r\n    position: relative;\r\n    img {\r\n        height: auto;\r\n        font-size: 0; //weird spacing issue if two image are next to each other, this will solve that issue\r\n    }\r\n    p {\r\n        transform: rotate(-2deg) translateY(-140%);\r\n        position: absolute;\r\n        width: 100%;\r\n        left: 0;\r\n    }\r\n    .mark {\r\n        display: inline;\r\n    }\r\n    @keyframes shine {\r\n        from{\r\n            background-position: 200%;\r\n        } \r\n        to {\r\n            background-position: -40px;\r\n        }\r\n    }\r\n\r\n    img.loading {\r\n        --shine: white;\r\n        --background: var(--grey);\r\n        background-image: linear-gradient(\r\n            90deg,\r\n            var(--background) 0px,\r\n            var(--shine) 40px,\r\n            var(--background) 80px\r\n        );\r\n        background-size: 500px;\r\n        animation: shine 1s infinite linear;\r\n    }\r\n\r\n`","import React from 'react'\r\nimport { ItemsGrid, ItemStyles } from '../styles/Grids'\r\n\r\n\r\nfunction LoadingGrid({ count }) {\r\n    return (\r\n        <ItemsGrid>\r\n            {Array.from({ length: count }).map((_, i) => (\r\n                <ItemStyles>\r\n                    <p>\r\n                        <span className=\"mark\">Loading...</span>\r\n                        </p>\r\n                    <img \r\n                        className=\"loading\" \r\n                        src=\"data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAAUAAAAECAQAAADsOj3LAAAADklEQVR42mNkgANGQkwAAJoABWH6GPAAAAAASUVORK5CYII=\" \r\n                        alt=\"loading\" \r\n                        width=\"500\" \r\n                        height=\"400\" \r\n                    />\r\n                </ItemStyles>\r\n            ))}\r\n        </ItemsGrid>\r\n    )\r\n}\r\n\r\nexport default LoadingGrid\r\n","import React from 'react'\r\nimport { ItemsGrid, ItemStyles } from '../styles/Grids'\r\n\r\nfunction ItemGrid({ items }) {\r\n    return <ItemsGrid>\r\n        {items.map((item) => (\r\n            <ItemStyles>\r\n                <p>\r\n                    <span className=\"mark\">{item.name}</span>\r\n                </p>\r\n                <img width=\"500\" height=\"400\" src={`${item.image.asset.url}?w=500&h=400&fit=crop`} alt={item.name} style={{\r\n                    background: `url(${item.image.asset.metadata.lqip})`,\r\n                    backgroundSize: 'cover',\r\n                }} />\r\n            </ItemStyles>\r\n        ))}\r\n    </ItemsGrid>\r\n}\r\n\r\nexport default ItemGrid\r\n","import React from 'react'\r\nimport Layout from \"../components/Layout\"\r\nimport useLatestData from \"../utils/useLatestData\"\r\nimport { HomePageGrids } from \"../styles/Grids\"\r\nimport LoadingGrid from '../components/LoadingGrid'\r\nimport ItemGrid from '../components/ItemGrid'\r\n\r\n\r\nfunction CurrentlySlicing({ slicemasters }) {\r\n    console.log(slicemasters)\r\n    return(\r\n        <div>\r\n            <h2 className=\"center\">\r\n                <span className=\"mark tilt\">Slicemasters On</span>\r\n            </h2>\r\n            <p>Home slices, standing by</p>\r\n            {!slicemasters && <LoadingGrid count={4} />}\r\n            {slicemasters && !slicemasters?.length  && (<p>No one is working right now</p>)}\r\n            {slicemasters?.length && <ItemGrid items={slicemasters} />} \r\n        </div>\r\n    )\r\n}\r\nfunction HotSlices({ hotSlices }) {\r\n    return(\r\n        <div>\r\n            <h2 className=\"center\">\r\n                <span className=\"mark tilt\">Hot slices</span>\r\n            </h2>\r\n            <p>Come on by, and buy a slice!</p>\r\n            {!hotSlices && <LoadingGrid count={4} />}\r\n            {hotSlices && !hotSlices?.length  && (<p>Nothing in the case</p>)}\r\n            {hotSlices?.length && <ItemGrid items={hotSlices} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction HomePage () {\r\n\r\n    const {slicemasters, hotSlices} = useLatestData();\r\n    return (\r\n        <div className=\"center\">\r\n            <h1>Best Pizza Downtown!</h1>\r\n            <p>Open 9am to 8pm Every single day!</p>\r\n            <HomePageGrids>\r\n                 <CurrentlySlicing slicemasters={slicemasters} />\r\n                 <HotSlices hotSlices={hotSlices} />\r\n            </HomePageGrids>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomePage \r\n\r\n\r\n/*\r\n    Page query: \r\n        - can be dynamic with variables\r\n        - can only be run on a top level page\r\n\r\n    Static query:\r\n        - can not be dynamic, no variables can be passed in\r\n        - can be run anywhere\r\n\r\n*/"],"sourceRoot":""}