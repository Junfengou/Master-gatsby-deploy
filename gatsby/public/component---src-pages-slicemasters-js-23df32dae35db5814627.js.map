{"version":3,"sources":["webpack:///./src/components/Pagination.js","webpack:///./src/pages/slicemasters.js"],"names":["PaginationStyles","styled","div","Pagination","pageSize","totalCount","currentPage","base","skip","totalPages","Math","ceil","prevPage","nextPage","hasNextPage","hasPrevPage","disabled","to","Array","from","length","map","_","i","className","SlicemastersGrid","SlicemasterStyles","query","SliceMasters","data","pageContext","slicemasters","nodes","console","log","SEO","title","parseInt","process","person","key","id","name","fluid","image","asset","description"],"mappings":"8MAIMA,EAAmBC,IAAOC,IAAV,mFAAGD,CAAH,kVA8CPE,MApBf,YAAwE,IAAlDC,EAAiD,EAAjDA,SAAUC,EAAuC,EAAvCA,WAAYC,EAA2B,EAA3BA,YAAmBC,GAAQ,EAAdC,KAAc,EAARD,MAErDE,EAAaC,KAAKC,KAAKN,EAAaD,GACpCQ,EAAWN,EAAc,EACzBO,EAAWP,EAAc,EACzBQ,EAAcD,GAAYJ,EAC1BM,EAAcH,GAAY,EAEhC,OACI,kBAACZ,EAAD,KACI,kBAAC,IAAD,CAAMgB,UAAWD,EAAaE,GAAOV,EAAL,IAAaK,GAA7C,UAGCM,MAAMC,KAAK,CAAEC,OAAQX,IAAaY,KAAI,SAACC,EAAGC,GAAJ,OAAU,kBAAC,IAAD,CAAMC,UAA2B,IAAhBlB,GAA2B,IAANiB,EAAU,UAAY,GAAIN,GAAOV,EAAL,KAAagB,EAAI,EAAIA,EAAI,EAAI,KAAQA,EAAI,MAE5J,kBAAC,IAAD,CAAMP,UAAWF,EAAaG,GAAOV,EAAL,IAAaM,GAA7C,Y,YCrCNY,EAAmBxB,IAAOC,IAAV,qFAAGD,CAAH,sFAOhByB,EAAoBzB,IAAOC,IAAV,sFAAGD,CAAH,kUA4DhB,IAAM0B,EAAK,YAoBHC,UAtDf,YAA8C,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,YAEpBC,EAAeF,EAAKE,aAAaC,MAGvC,OADAC,QAAQC,IAAIH,GAER,oCACA,kBAACI,EAAA,EAAD,CAAKC,MAAK,wBAAyBN,EAAYxB,aAAe,KAC9D,kBAAC,EAAD,CACIF,SAAUiC,SAASC,KACnBjC,WAAYwB,EAAKE,aAAa1B,WAC9BC,YAAawB,EAAYxB,aAAe,EACxCE,KAAMsB,EAAYtB,KAClBD,KAAK,kBAGT,kBAACkB,EAAD,KACKM,EAAaV,KAAI,SAACkB,GAAD,OACd,kBAACb,EAAD,CAAmBc,IAAKD,EAAOE,IAC3B,kBAAC,IAAD,CAAMxB,GAAE,iBAAmBsB,EAAOG,MAC9B,4BACI,0BAAMlB,UAAU,QAAQe,EAAOG,QAGvC,kBAAC,IAAD,CAAKC,MAAOJ,EAAOK,MAAMC,MAAMF,QAC/B,uBAAGnB,UAAU,eAAee,EAAOO","file":"component---src-pages-slicemasters-js-23df32dae35db5814627.js","sourcesContent":["import { Link } from 'gatsby'\r\nimport React from 'react'\r\nimport styled from \"styled-components\"\r\n\r\nconst PaginationStyles = styled.div`\r\n    display: flex;\r\n    align-content: center;\r\n    align-items: center;\r\n    justify-items: center;\r\n    border: 1px solid var(--grey);\r\n    margin: 2rem, 0;\r\n    border-radius: 5px;\r\n    text-align: center;\r\n    & > * {\r\n        padding: 1rem;\r\n        flex: 1;\r\n        border-right: 1px solid var(--grey);\r\n        text-decoration: none;\r\n        &[aria-current ], &.current {\r\n            color: var(--red);\r\n        }\r\n        &[disabled]\r\n        {\r\n            pointer-events: none;\r\n            color: var(--grey);\r\n        }\r\n    }\r\n`\r\n\r\n\r\nfunction Pagination({ pageSize, totalCount, currentPage, skip, base }) {\r\n\r\n    const totalPages = Math.ceil(totalCount / pageSize)\r\n    const prevPage = currentPage - 1;\r\n    const nextPage = currentPage + 1;\r\n    const hasNextPage = nextPage <= totalPages\r\n    const hasPrevPage = prevPage >= 1\r\n\r\n    return (\r\n        <PaginationStyles>\r\n            <Link disabled={!hasPrevPage} to={`${base}/${prevPage}`} >⏪ Prev</Link>\r\n\r\n            {/* This line of code shows the number of pages between the prev and next link */}\r\n            {Array.from({ length: totalPages}).map((_, i) => <Link className={currentPage === 1 && i === 0 ? 'current' : ''} to={`${base}/${i > 0 ? i + 1 : \"\"}`} >{i + 1}</Link>)}\r\n\r\n            <Link disabled={!hasNextPage} to={`${base}/${nextPage}`} >Next ⏩</Link>\r\n        </PaginationStyles>\r\n    )\r\n}\r\n\r\nexport default Pagination\r\n","import React from 'react'\r\nimport { graphql, Link } from 'gatsby'\r\nimport Img from \"gatsby-image\"\r\nimport styled from \"styled-components\"\r\nimport Pagination from \"../components/Pagination\"\r\nimport SEO from \"../components/SEO\";\r\n\r\n\r\nconst SlicemastersGrid = styled.div`\r\n    display: grid;\r\n    gap: 2rem;\r\n    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\r\n`\r\n\r\n\r\nconst SlicemasterStyles = styled.div`\r\n    text-decoration: none;\r\n    .gatsby-image-wrapper {\r\n        height: 400px;\r\n    }\r\n    h2 {\r\n        transform: rotate(-2deg);\r\n        text-align: center;\r\n        font-size: 4rem;\r\n        margin-bottom: -2rem;\r\n        position: relative;\r\n        z-index: 2;\r\n    }\r\n    .description {\r\n        background: var(--yellow);\r\n        padding: 1rem;\r\n        margin: 2rem;\r\n        margin-top: -6rem;\r\n        z-index: 2;\r\n        position: relative;\r\n        transform: rotate(1deg);\r\n        text-align: center;\r\n    }\r\n`\r\n\r\n\r\nfunction SliceMasters({ data, pageContext }) {\r\n\r\n    const slicemasters = data.slicemasters.nodes;\r\n\r\n    console.log(slicemasters)\r\n    return (\r\n        <>\r\n        <SEO title={`Slicemasters - Page ${pageContext.currentPage || 1}`} />\r\n        <Pagination \r\n            pageSize={parseInt(process.env.GATSBY_PAGE_SIZE)}  \r\n            totalCount={data.slicemasters.totalCount} \r\n            currentPage={pageContext.currentPage || 1}\r\n            skip={pageContext.skip}\r\n            base=\"/slicemasters\" \r\n            />\r\n\r\n        <SlicemastersGrid>\r\n            {slicemasters.map((person) => (\r\n                <SlicemasterStyles key={person.id}>\r\n                    <Link to={`/slicemasters/${person.name}`} >\r\n                        <h2 >\r\n                            <span className=\"mark\">{person.name}</span>\r\n                        </h2>\r\n                    </Link>\r\n                    <Img fluid={person.image.asset.fluid} />\r\n                    <p className=\"description\">{person.description}</p>\r\n                </SlicemasterStyles>\r\n            ))}\r\n        </SlicemastersGrid>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport const query = graphql`\r\n    query($skip: Int = 0, $pageSize: Int! = 3) {\r\n        slicemasters: allSanityPerson(limit: $pageSize, skip: $skip) {\r\n            totalCount\r\n            nodes {\r\n                name\r\n                id\r\n                description\r\n                image {\r\n                    asset {\r\n                        fluid(maxWidth: 410)\r\n                        {\r\n                            ...GatsbySanityImageFluid\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\nexport default SliceMasters\r\n"],"sourceRoot":""}